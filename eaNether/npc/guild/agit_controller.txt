//===== eAthena Script =======================================
//= War of Emperium - WoE Auto-Start
//===== By: ==================================================
//= kalen (1.0)
//= 1.1 by Akaru and ho|yAnge|
//===== Current Version: =====================================
//= 2.0
//===== Compatible With: =====================================
//= eAthena SVN; RO Episode 4+
//===== Description: =========================================
//= Auto Start for War of Emperium
//=============================================
//= gettime(3): Gets hour (24 hour time)
//= gettime(4): Gets day of week 1=Monday, 2=Tuesday,
//= 3=Wednesday, 4=Thursday, etc.
//===== Additional Comments: =================================
//= v1.1a changed OnInit to OnAgitInit.[kobra_k88]
//= v1.2 added gettime checks. removed $AgitStarted var.[kobra_k88]
//= v1.3 Moved treasure spawn time here.[kobra_k88]
//= v1.3a Implemented Shadowlady's idea to allow for different
//= start/stop times on different days.[kobra_k88]
//= 1.4 Fixed treasure chests spawn! We had to unroll some loops
//= Now they appear in castles from 00:01 to 00:24. [Lupus]
//= 1.5 Fixed WOE end messages on non-WOE days, by Avaj
//= 1.5a missing tabs [KarLaeda]
//= 1.6 Corrected multiple "WoE has begun" announces [ultramage]
//= 1.7 Commented out the WoE start and end announces. [L0ne_W0lf]
//= 1.8 Castle owners displayed when WoE starts and finished. [L0ne_W0lf]
//= 1.8a Will now report unoccupied castles at start/end. [L0ne_W0lf]
//= 1.8b Whoops. Fixed a mistake :D [L0ne_W0lf]
//= 1.9 Rearranged the time-checks so they no longer use goto. [L0ne_W0lf]
//=	Removed treasure spawning function calls. (No longer needed)
//= 2.0 Added WoE Battle Log support for broadcasts. [L0ne_W0lf]
//============================================================
//| To know how to set up WoE times, go to doc\woe_time_explanation.txt
// WoE Start/Stop times
//======================================
-	script	Agit_Event	-1,{
	end;

OnAgitInit:
OnClock1600:
OnClock1800:
OnClock1900:
OnClock2000:
OnClock2100:
OnClock2200:
OnClock2300:
OnClock0000:

	// Starting Time Checks
	// ============================================================================
	if((gettime(4) == 0) && (gettime(3) >= 20 && gettime(3) < 21) || (gettime(4) == 3) && (gettime(3) >= 21 && gettime(3) < 22)){
		if(!agitcheck()){
			AgitStart 1;
			setmapflag "gefg_cas04",mf_nostorage;
			setmapflag "gefg_cas04",mf_noguildstorage;
			announce "• A Guerra do Emperium inicia-se agora! •",bc_all|bc_woe;
		}
		end;
	}
	
	if((gettime(4) == 0) && (gettime(3) >= 18 && gettime(3) < 19)){
		if( !agitcheck() )
		{
			AgitStart 2;
			setmapflag "nguild_prt",mf_nostorage;
			setmapflag "nguild_prt",mf_noguildstorage;
			announce "• A Guerra do Emperium - Tempos Ancestrais inicia-se agora! •",bc_all|bc_woe;
		}
		end;
	}
	
	if((gettime(4) == 0) && (gettime(3) >= 16 && gettime(3) < 18)){
		if(!agitcheck()){
			//AgitStart 2; // 2 means, all woe_set 1 castles will be opened for WoE, the rest will be blocked
			//announce "• A Guerra do Emperium - Segunda Edição inicia-se agora! •",bc_all|bc_woe;
		}
		end;
	}

	// End Time Checks
	// ============================================================================
	if( (gettime(4) == 0 && gettime(3) == 21) || (gettime(4) == 3 && gettime(3) == 22) )
	{
		if(agitcheck())
		{
			AgitEnd;
			removemapflag "gefg_cas04",mf_nostorage;
			removemapflag "gefg_cas04",mf_noguildstorage;			
			announce "• A Guerra do Emperium termina agora! •",bc_all|bc_woe;
		}
		end;
	}
	
	if(gettime(4) == 0 && gettime(3) == 19){
		if(agitcheck()){
			AgitEnd;
			removemapflag "nguild_prt",mf_nostorage;
			removemapflag "nguild_prt",mf_noguildstorage;			
			announce "• A Guerra do Emperium - Tempos Ancestrais termina agora! •",bc_all|bc_woe;
		}
		end;
	}
	
	if( gettime(4) == 0 && gettime(3) == 18 )
	{
		if( agitcheck() )
		{
			//AgitEnd;
			//announce "• A Guerra do Emperium - Segunda Edição termina agora! •",bc_all|bc_woe;
		}
		end;
	}
	end;
}

aldeg_cas01	mapflag	blocked
aldeg_cas02	mapflag	blocked
aldeg_cas03	mapflag	blocked
aldeg_cas04	mapflag	blocked
aldeg_cas05	mapflag	blocked

gefg_cas01	mapflag	blocked
gefg_cas02	mapflag	blocked
gefg_cas03	mapflag	blocked
gefg_cas04	mapflag	woe_set	1
gefg_cas05	mapflag	blocked	

payg_cas01	mapflag	blocked
payg_cas02	mapflag	blocked
payg_cas03	mapflag	blocked
payg_cas04	mapflag	blocked
payg_cas05	mapflag	blocked

prtg_cas01	mapflag	blocked
prtg_cas02	mapflag	blocked
prtg_cas03	mapflag	blocked
prtg_cas04	mapflag	blocked
prtg_cas05	mapflag	blocked

schg_cas01	mapflag	blocked
schg_cas02	mapflag	blocked
schg_cas03	mapflag	blocked
schg_cas04	mapflag	blocked
schg_cas05	mapflag	blocked

arug_cas01	mapflag	blocked
arug_cas02	mapflag	blocked
arug_cas03	mapflag	blocked
arug_cas04	mapflag	blocked
arug_cas05	mapflag	blocked


//== • Tempos Ancestrais
nguild_alde	mapflag	blocked
nguild_gef	mapflag	blocked
nguild_pay	mapflag	blocked
nguild_prt	mapflag	woe_set	2

nguild_alde	mapflag	ancient
nguild_gef	mapflag	ancient
nguild_pay	mapflag	ancient
nguild_prt	mapflag	ancient

nguild_alde	mapflag	gvg_noalliance
nguild_gef	mapflag	gvg_noalliance
nguild_pay	mapflag	gvg_noalliance
nguild_prt	mapflag	gvg_noalliance